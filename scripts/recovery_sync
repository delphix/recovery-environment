#!/bin/bash

#
# This script will sync host keys, authorized public keys, and networking
# configuration from the running system to the recovery environment. It should
# be run whenever any of these things change, to ensure that the recovery
# environment remains accessible in the event of a serious system problem.
#

set -euxo pipefail

function cleanup() {
	rm -rf "$workdir"
	rm -f "${target}.tmp"
}

function die() {
	echo "$1" >&2
	exit 1
}

[[ $# -eq 1 ]] || die "Illegal number of parameters"
target="$1"
workdir=$(mktemp -d)
trap cleanup EXIT

#
# When syncing the recovery environment, we want to ensure that only a single
# process is attempting to do this at any given time.  Thus, we add some
# locking in case multiple processes call this script concurrently; to prevent
# accidental corruption and/or failures.
#
if [[ "${SYNC_EXECUTE_LOCKED:-x}" != "true" ]]; then
	exec env SYNC_EXECUTE_LOCKED="true" \
		flock -e "/var/run/delphix-sync-execute-lock" "$0" "$@"
fi

cd "$workdir"
chown root .
chmod 0755 .
gunzip <"$target" | cpio -idm

rsync -a /run/systemd/network/ etc/systemd/network
rsync -a /lib/systemd/network/ lib/systemd/network
mkdir -p etc/dropbear
rsync -a /opt/delphix/server/etc/nginx.default ./opt/delphix/server/etc/

#
# Before first engine startup, this directory doesn't exist. We should allow
# this command to fail without stopping the sync.
#
if [[ -d /opt/delphix/server/etc/nginx ]]; then
	rsync -a /opt/delphix/server/etc/nginx ./opt/delphix/server/etc/

	#
	# Delete the access logging from the nginx recovery environment, since
	# the logs won't persist after reboot anyway.
	#
	sed -i '/_log /d' ./opt/delphix/server/etc/nginx/nginx.conf

	#
	# Modify the nginx config to load the recovery environment's server
	# outage message instead of the normal Delphix Engine config files.
	#
	sed -i 's@include /opt/delphix/server/etc/nginx/conf.d/\*;@root /var/www/;@' \
		./opt/delphix/server/etc/nginx/nginx.conf

fi

#
# Dropbear reads keys in a different format from the normal ssh server. We
# use dropbearconvert to translate them.
#
for fmt in $(find /etc/ssh -name \*key | sed 's/.*host_\(.*\)_key/\1/'); do
	# Unfortunately, dropbear doesn't support ed25519 keys.
	[[ "$fmt" == "ed25519" ]] && continue
	LD_LIBRARY_PATH="./usr/lib/x86_64-linux-gnu" ./usr/lib/dropbear/dropbearconvert \
		openssh dropbear "/etc/ssh/ssh_host_${fmt}_key" \
		"etc/dropbear/dropbear_${fmt}_host_key"
done

rsync -a /etc/machine-id etc/
rsync -a --relative /export/home/delphix/.ssh .

tmpfile=$(mktemp "${target}.XXXXX")
find . -print0 | cpio --null --create --format=newc | gzip -7 >"$tmpfile"
mv "$tmpfile" "$target"
