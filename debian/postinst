#!/bin/bash
# shellcheck disable=SC1091

function die() {
	echo "$1" >&2
	exit 1
}

base_img="/usr/share/recovery_environment/recovery.img"
target="/boot/recovery.img"
workdir=$(mktemp -d)

cd "$workdir" || die "workdir doesn't exist"
chown root .
chmod 0755 .
gunzip <"$base_img" | cpio -idm

mknod -m 600 ./dev/console c 5 1

. /usr/lib/grub/grub-mkconfig_lib

#
# Determine the latest installed kernel version, and sync kernel modules for
# that version into the recovery environment.
#
list=
for i in /boot/vmlinuz-*; do
	if grub_file_is_not_garbage "$i"; then list="$list $i"; fi
done
linux=$(version_find_latest "$list")
basename=$(basename "$linux")

modpath="/lib/modules/${basename#vmlinuz-}"
mkdir -p "./$modpath/kernel/drivers/"
rsync -a "/$modpath"/modules* "./$modpath/"
rsync -a "/$modpath/vdso" "./$modpath/"
rsync -a "/$modpath/extra" "./$modpath/"
rsync -a "/$modpath/kernel/drivers" "./$modpath/kernel/"

if [[ $(cat /var/lib/delphix-appliance/platform) == "gcp" ]]; then
	rsync -a "/$modpath/kernel/net/" "./$modpath/kernel/net/"
fi

rm -rf "./$modpath/kernel/drivers/net/wireless"
cp -r /lib/modules-load.d ./lib/
cp -r /lib/udev ./lib/

rsync -a /etc/{group,passwd,shadow}{,-} ./etc/
sudo sed -i 's@^root.*@'"$(sudo grep ^delphix ./etc/shadow | sed 's/delphix/root/')"'@' ./etc/shadow
rsync -a /etc/{shells,nsswitch.conf} ./etc/
rsync -a /etc/network/ ./etc/network/
rsync -a /etc/dhcp/ ./etc/dhcp/
sed -i 's@/bin/bash@/bin/sh@g' ./etc/passwd{,-}
sed -i 's@/opt/delphix/server/bin/supportlogin@/bin/sh@g' ./etc/passwd{,-}

mkdir -p ./opt/delphix/server/etc/{nginx.default,nginx}
ln -s /opt/delphix/server/etc/nginx/nginx.conf ./etc/nginx/nginx.conf

find . -print0 | cpio --null --create --format=newc | gzip -7 >"$target" 2>/dev/null

#
# The grub config needs to be updated in order for the recovery environment to
# function properly. However, we store our grub config file in a separate ZFS
# filesystem, which resulted in a bug where we modified the grub config even
# when doing an upgrade inside a container. As a result, we do not run
# mkconfig in this script, and rely on the end-of-upgrade scripts to do it.
#

grub-editenv /boot/grub/grubenv create
grub-editenv /boot/grub/grubenv set bootcount=0
systemctl enable delphix-bootcount.service

/usr/bin/recovery_sync $target

cd / || die "failed to cd /"
rm -rf "$workdir"
